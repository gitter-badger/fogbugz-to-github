{
  "name": "Fogbugz-to-GitHub",
  "tagline": "Migrates FogBugz cases to GitHub issues.",
  "body": "# FogBugz to GitHub (FB2GH)\r\n![Logo](http://sudicode.com/images/fb2gh-logo.png)  \r\n[![CircleCI](https://circleci.com/gh/sudiamanj/fogbugz-to-github.svg?style=svg)](https://circleci.com/gh/sudiamanj/fogbugz-to-github)  \r\n**FB2GH** is designed to help you programmatically migrate your [FogBugz cases](https://www.fogcreek.com/fogbugz/) into [GitHub issues](https://guides.github.com/features/issues/).\r\n\r\n## Usage\r\n```java\r\n// Login to FogBugz\r\n// How to get an API token: http://help.fogcreek.com/8447/how-to-get-a-fogbugz-xml-api-token\r\nFogBugz fogBugz = FBFactory.newFogBugz(fogBugzURL, fogBugzAPIToken);\r\n\r\n// You can also get a token through FB2GH\r\nFogBugz otherFb = FBFactory.newFogBugz(fogBugzURL, fogBugzEmail, fogBugzPassword);\r\nSystem.out.println(otherFb.getAuthToken());\r\n\r\n// FogBugz::searchCases(String) functions exactly like the search box in FogBugz\r\nList<FBCase> caseList = fogBugz.searchCases(\"123\");\r\n\r\n// Login to GitHub\r\nGitHub github = GHFactory.newGitHub(githubOAuthToken); // Using OAuth (https://github.com/settings/tokens/new)\r\nGitHub otherGh = GHFactory.newGitHub(githubUsername, githubPassword); // Using basic authentication\r\nGHRepo ghRepo = github.getRepo(repoOwner, repoName); // GitHub repository to migrate to\r\n\r\n// Migrate caseList to ghRepo\r\nMigrator migrator = new Migrator.Builder(fogBugz, caseList, ghRepo).build();\r\nmigrator.migrate();\r\n```\r\n\r\n## Dependency Information\r\nApache Maven\r\n```xml\r\n<repositories>\r\n    <repository>\r\n        <id>sudiamanj</id>\r\n        <name>maven-repo</name>\r\n        <url>https://github.com/sudiamanj/maven-repo/raw/master/</url>\r\n    </repository>\r\n</repositories>\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>com.sudicode</groupId>\r\n        <artifactId>fb2gh</artifactId>\r\n        <version>1.0-SNAPSHOT</version>\r\n    </dependency>\r\n</dependencies>\r\n```\r\n\r\n## Configuration\r\nThe `Migrator` class uses the [builder pattern](https://en.wikipedia.org/wiki/Builder_pattern) which makes it flexible in terms of customization.\r\n\r\nFor instance, here's how to define your own labeling function:\r\n```java\r\nMigrator migrator = new Migrator.Builder(fogBugz, caseList, ghRepo)\r\n        .fbCaseLabeler(new FBCaseLabeler() {\r\n            @Override\r\n            public List<GHLabel> getLabels(FBCase fbCase) {\r\n                List<GHLabel> list = new ArrayList<GHLabel>();\r\n                list.add(new GHLabel(\"F\" + fbCase.getId(), \"92602c\"));\r\n                if (fbCase.getSalesforceCaseId() != 0) {\r\n                    list.add(new GHLabel(\"S\" + fbCase.getSalesforceCaseId(), \"178cda\"));\r\n                }\r\n                list.add(new GHLabel(fbCase.getCategory()));\r\n                list.add(new GHLabel(fbCase.getPriority()));\r\n                return list;\r\n            }\r\n        })\r\n        .build();\r\n```\r\n\r\nYou can set as many options as you want before building, like so:\r\n```java\r\nMigrator migrator = new Migrator.Builder(fogBugz, caseList, ghRepo)\r\n        .closeIf(new Predicate<FBCase>() {\r\n            @Override\r\n            public boolean test(FBCase fbCase) {\r\n                return !fbCase.getStatus().equals(\"Active\");\r\n            }\r\n        })\r\n        .usernameMap(Collections.singletonMap(\"Jonathan Sudiaman\", \"sudiamanj\"))\r\n        .postDelay(500L)\r\n        .build();\r\n```\r\n\r\n## Troubleshooting\r\n\r\n### Why am I seeing the following message?\r\n```\r\nSLF4J: Failed to load class \"org.slf4j.impl.StaticLoggerBinder\".\r\nSLF4J: Defaulting to no-operation (NOP) logger implementation\r\nSLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.\r\n```\r\n\r\nThis project uses [SLF4J](http://www.slf4j.org), which allows end users to choose a logging facility at runtime. If you don't care about logging and want to disable this message, simply add [slf4j-nop](http://search.maven.org/#artifactdetails%7Corg.slf4j%7Cslf4j-nop%7C1.7.21%7Cjar) to your CLASSPATH. If you want to use SLF4J's logger, use [slf4j-simple](http://search.maven.org/#artifactdetails%7Corg.slf4j%7Cslf4j-simple%7C1.7.21%7Cjar). For more options, see [SLF4J user manual](http://www.slf4j.org/manual.html).\r\n\r\n### Why am I getting an AssertionError?\r\nThese are usually thrown by the GitHub API, looking something like this:\r\n```\r\nException in thread \"main\" java.lang.AssertionError: HTTP response status is not equal to 200:\r\n404 Not Found [https://api.github.com/repos/foo/bar/labels]\r\nServer: GitHub.com\r\n... \r\n{\"message\":\"Not Found\",\"documentation_url\":\"https://developer.github.com/v3\"}>\r\n\tat org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)\r\n\tat com.jcabi.http.response.RestResponse.assertStatus(RestResponse.java:111)\r\n\tat com.jcabi.github.RtValuePagination$Items.fetch(RtValuePagination.java:193)\r\n\tat com.jcabi.github.RtValuePagination$Items.hasNext(RtValuePagination.java:179)\r\n\tat com.sudicode.fb2gh.github.GHRepo.getLabels(GHRepo.java:111)\r\n\tat CallingClass.main(CallingClass.java:30)\r\n```\r\nThis means that you're trying to do something which wouldn't be possible on GitHub (e.g. access a nonexistent repo, add duplicate labels, etc). Read through your error message to figure out exactly what's going on. If the error persists, please [raise an issue](https://github.com/sudiamanj/fogbugz-to-github/issues).\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}